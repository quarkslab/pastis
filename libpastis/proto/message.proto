syntax = "proto3";
package libpastis;

/* -------------- Common --------------- */
enum State {
    RUNNING = 0;
    IDLE = 1;
}

enum Platform {
    ANY = 0;
    LINUX = 1;
    WINDOWS = 2;
    MACOS = 3;
    ANDROID = 4;
    IOS = 5;
}

message FuzzingEngine {
    string name     = 1;
    string version  = 2;
    string pymodule = 3;
}

message InputSeedMsg {
    enum SeedType {
        INPUT = 0;
        CRASH = 1;
        HANG  = 2;
    }
    bytes seed    = 1; // bytes of the seed
    SeedType type = 2; // whether it yielded a crash or is just an input
}

message DataMsg {
    string data = 1;  // Arbitrary serialized data.
}                     // The the peer is meant to understand it

/* ------------- Broker -> Agent ----------- */
message StartMsg {
    enum ExecMode {
        AUTO_EXEC   = 0;
        SINGLE_EXEC = 1;
        PERSISTENT  = 2;
    }
    enum FuzzMode {
        AUTO_FUZZ    = 0;
        INSTRUMENTED = 1;
        BINARY_ONLY  = 2;
    }
    enum CheckMode {
        CHECK_ALL  = 0;
        ALERT_ONLY = 1;
    }
    enum SeedInjectLoc {
        STDIN = 0;
        ARGV  = 1;
    }
    string binary_filename = 1;       // name of the binary file
    bytes binary           = 2;       // binary file (ELF) to fuzz
    string klocwork_report = 3;       // klocwork report (JSON serialized)
    FuzzingEngine engine   = 4;       // fuzzing engine (when client support multiple of them)
    ExecMode exec_mode     = 5;       // mode of execution
    FuzzMode fuzz_mode     = 6;       // mode of fuzzing
    CheckMode check_mode   = 7;       // check mode for Triton (ignored by Honggfuzz)
    string coverage_mode   = 8;       // coverage strategy for Triton (ignored by Triton)
    SeedInjectLoc seed_location  = 9;
    string engine_args           = 10; // Serialized JSON of engine parameters
    repeated string program_argv = 11;
}

message StopMsg {
    // Nothing specific to transmit
}

/* ------------- Agent -> Broker ----------- */
message HelloMsg {
    enum Arch {
        X86     = 0;
        X86_64  = 1;
        ARMV7   = 2;
        AARCH64 = 3;
    }
    Arch architecture = 1;
    uint32 cpus       = 2;
    uint64 memory     = 3;
    repeated FuzzingEngine engines = 4;
    string hostname                = 5;
    Platform platform              = 6;
}

message LogMsg {
    enum LogLevel {
        DEBUG    = 0;
        INFO     = 1;
        WARNING  = 2;
        ERROR    = 3;
        CRITICAL = 4;
    }
    string message = 1;
    LogLevel level = 2;
}

message TelemetryMsg {
    State state         = 1;
    uint32 exec_per_sec = 2;
    uint64 total_exec   = 3;
    uint32 cycle        = 4;  // number of seed pool loop since last cov update
    uint32 timeout      = 5;
    uint32 coverage_block  = 6;
    uint32 coverage_edge   = 7;
    uint32 coverage_path   = 8;
    uint64 last_cov_update = 9; // timestamp in second

    // Monitoring fields
    float cpu_usage = 10;  // total percentage of CPUs usage
    float mem_usage = 11;  // total RAM usage
}

message StopCoverageCriteria {
    //  Nothing specific to transmit
}

message EnvelopeMsg{
    oneof msg {
        InputSeedMsg input_msg = 1;
        DataMsg data_msg       = 2;
        StartMsg start_msg     = 3;
        StopMsg stop_msg       = 4;
        HelloMsg hello_msg     = 5;
        LogMsg log_msg         = 6;
        TelemetryMsg telemetry_msg         = 7;
        StopCoverageCriteria stop_crit_msg = 8;
    }
}
