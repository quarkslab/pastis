#!/usr/bin/env python3

# built-in imports
import click
import sys
import logging
import json
from typing import Optional, Tuple
from pathlib import Path

# Thirs-party imports
import coloredlogs

# Local imports
from pastisbroker import PastisBroker, BrokingMode
from libpastis.types import CheckMode, SeedInjectLoc
from pastishf import HonggfuzzDriver

from pastisbenchmark.runner import spawn_online_aflpp, spawn_online_triton, spawn_online_honggfuzz, check_scaling_frequency
from pastisbenchmark.replayer import ReplayType, Replayer
from pastisbenchmark.plotter import Plotter
from pastisbenchmark.results import CampaignResult


def configure_logging(level: int):
    logging.root.name = f"\033[7m\033[39m[ BROKER ]\033[0m"
    coloredlogs.install(level=level,
                        fmt="%(asctime)s %(name)s [%(levelname)s] %(message)s",
                        level_styles={'debug': {'color': 'blue'}, # 10
                                      'info': {}, # 20
                                      'warning': {'color': 'yellow'},  # 30
                                      'success': {'bold': True, 'color': 'green'}, # 35
                                      'error': {'color': 'red'},
                                      'critical': {'bold': True, 'color': 'red'}})

def iterate_file(file):
    p = Path(file)
    if p.is_file():  # Add the seed file
        yield p
    elif p.is_dir():  # Add all file contained in the directory as triton configuration
        for sub_s in p.iterdir():
            yield sub_s

@click.group()
def cli():
    pass


@cli.command(context_settings=dict(show_default=True))
@click.option('-w', '--workspace', type=click.Path(), default="workspace", help="Workspace directory to store data")
@click.option('-b', '--bins', type=click.Path(exists=True, file_okay=False, dir_okay=True, readable=True), required=True, help="Directory containing binaries")
@click.option('-s', '--seeds', type=click.Path(exists=True, file_okay=True, dir_okay=True, readable=True), help="Directory containing initial corpus")
@click.option('-m', '--mode', type=click.Choice([x.name for x in BrokingMode]), default=BrokingMode.FULL.name, help="Mode of broking")
@click.option('-i', '--injloc', type=click.Choice([x.name for x in list(SeedInjectLoc)]), default=SeedInjectLoc.STDIN.name, help="Seed injection location")
@click.option('--aflpp', is_flag=True, type=bool, default=False, help="Enable AFL++")
@click.option('--honggfuzz', is_flag=True, type=bool, default=False, help="Enable Honggfuzz")
@click.option('--triton', is_flag=True, type=bool, help="Enable TritonDSE")
@click.option('--debug', type=bool,  is_flag=True, show_default=True, default=False, help='Enable debug logs')
@click.option('-t', "--timeout", type=int, default=None, help="Timeout of the campaign. Time after which stopping the campaign")
@click.option('-p', '--port', type=int, default=5555, help="Port to bind to", multiple=False)
@click.option('--hfuzz-path', type=click.Path(exists=True, file_okay=True, dir_okay=True, readable=True), required=False, help="Custom Honggfuzz path")
def run(workspace: str, bins: str, seeds: str, mode: str, injloc: str, aflpp: bool, honggfuzz: bool, triton: bool, debug: bool,
        timeout: Optional[int], port: int, hfuzz_path: str):

    configure_logging(logging.DEBUG if debug else logging.INFO)

    broker = PastisBroker(workspace, bins, BrokingMode[mode], CheckMode.CHECK_ALL, SeedInjectLoc[injloc], None, [])

    # Add all given seeds as initial seed
    for s in iterate_file(seeds):  # File if one file, or iterate dir if directory
        broker.add_seed_file(s, initial=True)

    ws_root = broker.workspace.root

    clients_ws = ws_root / "clients_ws"

    if clients_ws.exists():
        logging.error("benchmarks have already been runnned in that directory")
        sys.exit(1)
    else:
        clients_ws.mkdir()

    if aflpp:
        # create a workspace directory and launch it
        if not check_scaling_frequency():
            logging.error("CPU is not configured on performance (system uses on-demande CPU freq scaling)")
            logging.info("try: echo performance | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor")
            sys.exit(1)
        aflpp_ws = clients_ws / "aflpp"
        aflpp_ws.mkdir()
        spawn_online_aflpp(aflpp_ws, port)

    if honggfuzz:
        # create a workspace directory and launch it
        hf_exe_path = None

        if not HonggfuzzDriver.honggfuzz_available() and hfuzz_path:
            hf_exe_path = hfuzz_path

        if not HonggfuzzDriver.honggfuzz_available():
            logging.error("Can't find custom Honggfuzz directory (please set HFUZZ_PATH, or --hfuzz-path variable)")
            sys.exit(1)
        else:  # Honggfuzz is available
            hf_ws = clients_ws / "hfuzz"
            hf_ws.mkdir()
            spawn_online_honggfuzz(hf_ws, hf_exe_path, port)

    if triton:
        # Look for configuration files, add them to the broker and launch as many triton instances
        tt_confs = ws_root / "triton_confs"
        broker.load_engine_addon("pastisttbroker")
        if tt_confs.exists():
            for i, conf in enumerate(tt_confs.iterdir()):
                with open(conf, "r+") as fd:
                    tt_ws = clients_ws / f"ttdse_{i}"
                    c = json.load(fd)
                    c["workspace"] = str(tt_ws)
                    fd.seek(0)
                    json.dump(c, fd, indent=2)
                    fd.truncate()
                logging.info(f"Add Triton configuration: {conf}")
                broker.add_engine_configuration("TRITON", conf)
                spawn_online_triton(port)
        else:
            logging.warning("Triton enabled but no configuration found")

    # Bind it and start listening (clients can connect)
    broker.bind(port)
    broker.run(timeout)



@cli.command(context_settings=dict(show_default=True))
@click.argument('workspace', type=click.Path(exists=True, file_okay=False, dir_okay=True, readable=True))
@click.option('-t', '--type', type=click.Choice([x.name for x in list(ReplayType)]), default=ReplayType.qbdi.name, help="Replay type")
@click.option('-i', '--injloc', type=click.Choice([x.name for x in list(SeedInjectLoc)]), default=SeedInjectLoc.STDIN.name, help="Seed injection location")
@click.option('--live', type=bool, is_flag=True, default=False, help="Enable replaying input files during the campaign")
@click.option('--stream', type=bool, is_flag=True, default=False, help="Enable streaming coverage on a ZMQ socket")
@click.argument('program', type=click.Path(exists=True, file_okay=True, dir_okay=False, readable=True))
@click.argument('pargvs', nargs=-1)
def replay(workspace: str, type: str, injloc: str, live: bool, stream: bool, program: str, pargvs: Tuple[str]):

    configure_logging(logging.INFO)

    rtype = ReplayType[type]
    injloc = SeedInjectLoc[injloc]

    replayer = Replayer(Path(program), Path(workspace), rtype, injloc, stream, *pargvs)

    if live:
        replayer.start()
    else:
        count = sum(1 for _ in replayer.iter())
        for i, file in enumerate(replayer.iter()):
            logging.info(f"[{i}/{count}] replay: {file.name}")


@cli.command(context_settings=dict(show_default=True))
@click.option('--show', type=bool, is_flag=True, default=True, help="Show the plots")
@click.option('-n', '--name', type=str, required=True, help="Name to give to the plotting")
@click.argument('workspace', type=click.Path(exists=True, file_okay=False, dir_okay=True, readable=True), help="Workspace directory to plot", multiple=True)
def plot(show: bool, name: str, workspace: Tuple[str]):

    configure_logging(logging.INFO)

    plotter = Plotter(name)
    for ws in workspace:
        campaign = CampaignResult(Path(ws))
        if campaign.replay_ok():
            plotter.add_campaign_to_plot(campaign)
        else:
            logging.warning(f"workspace: {ws} has not been replayed")

    if show:
        plotter.show()
    else:
        # Save the plots in all the selected workspaces
        for ws in [Path(x) for x in workspace]:
            out_dir = ws / "plots"
            plotter.save_to(out_dir)
            logging.info(f"plot written to: {out_dir}")


if __name__ == "__main__":
    cli()

